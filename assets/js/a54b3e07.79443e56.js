"use strict";(self.webpackChunkgrid_docs=self.webpackChunkgrid_docs||[]).push([[4921],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7836:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),l=["components"],a={description:"Get logs when running experiments"},s="grid logs",c={unversionedId:"products/global-cli-configs/cli-api/grid-logs",id:"products/global-cli-configs/cli-api/grid-logs",title:"grid logs",description:"Get logs when running experiments",source:"@site/docs/products/global-cli-configs/cli-api/grid-logs.md",sourceDirName:"products/global-cli-configs/cli-api",slug:"/products/global-cli-configs/cli-api/grid-logs",permalink:"/products/global-cli-configs/cli-api/grid-logs",editUrl:"https://github.com/gridai/grid-docs/edit/master/docs/products/global-cli-configs/cli-api/grid-logs.md",tags:[],version:"current",lastUpdatedAt:1645213705,formattedLastUpdatedAt:"2/18/2022",frontMatter:{description:"Get logs when running experiments"}},u=[{value:"Build logs",id:"build-logs",children:[],level:2},{value:"Experiment logs",id:"experiment-logs",children:[],level:2},{value:"Command arguments",id:"command-arguments",children:[{value:"--n_lines",id:"--n_lines",children:[],level:3},{value:"--page",id:"--page",children:[],level:3},{value:"--max_lines",id:"--max_lines",children:[],level:3},{value:"--use_pager",id:"--use_pager",children:[],level:3}],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"grid-logs"},"grid logs"),(0,i.kt)("p",null,"To view logs for an experiment use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid logs the-experiment-name\n")),(0,i.kt)("p",null,"Logs show two sections, build logs and stdout logs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# build logs\n[build] [2021-04-20T01:42:31.045408+00:00] Task experiments-cd13d646-cf31-486a-a78f-2e4a825e27dd created.\n...\n\n# stdout logs\n[stdout] [2021-04-20T01:47:59.723077+00:00] Restoring data from /gridai/project/lightning_logs to .\n[stdout] [2021-04-20T01:48:06.702111+00:00] --------------------------------------------------\n[stdout] [2021-04-20T01:48:06.702137+00:00] GPUS: There are 1 GPUs on this machine\n[stdout] [2021-04-20T01:48:06.702144+00:00] --------------------------------------------------\n[stdout] [2021-04-20T01:48:06.702150+00:00] PARAMS: I want to eat: 3 pear\n[stdout] [2021-04-20T01:48:06.702184+00:00] --------------------------------------------------\n[stdout] [2021-04-20T01:48:06.702192+00:00] i can run any ML library like numpy, pytorch lightning, sklearn pytorch, keras, tensorflow\n[stdout] [2021-04-20T01:48:06.702199+00:00] torch: tensor([0.6885]) numpy [0.9643539]\n")),(0,i.kt)("h2",{id:"build-logs"},"Build logs"),(0,i.kt)("p",null,"Sometimes an experiment may fail because a dependency install can be wrong, or something happens during the environment build."),(0,i.kt)("p",null,"These kinds of failures can be found in the build logs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"[build] [2021-04-20T01:42:31.045408+00:00] Task experiments-cd13d646-cf31-486a-a78f-2e4a825e27dd created.\n")),(0,i.kt)("h2",{id:"experiment-logs"},"Experiment logs"),(0,i.kt)("p",null,"For outputs of the file, look at the stdout logs. If your file throws an exception, that will appear here."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"# stdout logs\n[stdout] [2021-04-20T01:47:59.723077+00:00] Restoring data from /gridai/project/lightning_logs to .\n[stdout] [2021-04-20T01:48:06.702111+00:00] --------------------------------------------------\n[stdout] [2021-04-20T01:48:06.702137+00:00] GPUS: There are 1 GPUs on this machine\n[stdout] [2021-04-20T01:48:06.702144+00:00] --------------------------------------------------\n[stdout] [2021-04-20T01:48:06.702150+00:00] PARAMS: I want to eat: 3 pear\n[stdout] [2021-04-20T01:48:06.702184+00:00] --------------------------------------------------\n[stdout] [2021-04-20T01:48:06.702192+00:00] i can run any ML library like numpy, pytorch lightning, sklearn pytorch, keras, tensorflow\n[stdout] [2021-04-20T01:48:06.702199+00:00] torch: tensor([0.6885]) numpy [0.9643539]\n")),(0,i.kt)("h2",{id:"command-arguments"},"Command arguments"),(0,i.kt)("h3",{id:"--n_lines"},"--n_lines"),(0,i.kt)("p",null,"Number of log lines (from the end) to return."),(0,i.kt)("h3",{id:"--page"},"--page"),(0,i.kt)("p",null,"When an experiment is finished, logs are given in pages. This specificies which page to fetch from archived logs."),(0,i.kt)("h3",{id:"--max_lines"},"--max_lines"),(0,i.kt)("p",null,"Maximum number of lines to print in terminal"),(0,i.kt)("h3",{id:"--use_pager"},"--use_pager"),(0,i.kt)("p",null,"Allows interactive / scrollable logs"))}p.isMDXComponent=!0}}]);
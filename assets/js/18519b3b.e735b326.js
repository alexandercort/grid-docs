"use strict";(self.webpackChunkgrid_docs=self.webpackChunkgrid_docs||[]).push([[8489],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8189:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:2,title:"Reference",sidebar_label:"Reference"},p=void 0,s={unversionedId:"sdk/api",id:"sdk/api",title:"Reference",description:"Run",source:"@site/docs/sdk/api.md",sourceDirName:"sdk",slug:"/sdk/api",permalink:"/sdk/api",editUrl:"https://github.com/gridai/grid-docs/edit/master/docs/sdk/api.md",tags:[],version:"current",lastUpdatedAt:1645031319,formattedLastUpdatedAt:"2/16/2022",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Reference",sidebar_label:"Reference"}},u=[{value:"Run",id:"run",children:[{value:"Parameters",id:"parameters",children:[],level:3},{value:"Attributes",id:"attributes",children:[],level:3},{value:"Parameters",id:"parameters-1",children:[],level:3}],level:2},{value:"Experiment",id:"experiment",children:[],level:2},{value:"Datastore",id:"datastore",children:[{value:"Parameters",id:"parameters-2",children:[],level:3}],level:2},{value:"api",id:"api",children:[{value:"Parameters",id:"parameters-3",children:[],level:3},{value:"Parameters",id:"parameters-4",children:[],level:3},{value:"Attributes",id:"attributes-1",children:[],level:3},{value:"Parameters",id:"parameters-5",children:[],level:3}],level:2}],d={toc:u};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"run"},"Run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nclass Run(name=None,\n    run_command=None,\n    description=None,\n    strategy='grid_search',\n    strategy_options=None,\n    num_trials=0,\n    env_vars=None,\n    framework='lightning',\n    dependency_file='./requirements.txt',\n    localdir=False,\n    url=None,\n    path=None,\n    dockerfile=None,\n    auto_resume=False,\n    resources=None,\n    datastore=None,\n    datastore_mount_dir=None,\n    actions=None,\n    scratch=None,\n    cluster_id=None,\n    config_file=None,\n    dry_run=False)\n\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Run")," is a container for a set of computations executed over search space."),(0,l.kt)("p",null,"This object can be instantiated with constructor args below in\norder to create/start a new set of computations (",(0,l.kt)("inlineCode",{parentName:"p"},"Experiments"),")\nwhich make up the ",(0,l.kt)("inlineCode",{parentName:"p"},"Run"),"."),(0,l.kt)("p",null,"Alternatively, an existig ",(0,l.kt)("inlineCode",{parentName:"p"},"Run")," ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," can be passed in the\nconstructor, and the SDK will load all the associated ",(0,l.kt)("inlineCode",{parentName:"p"},"Run")," /\n",(0,l.kt)("inlineCode",{parentName:"p"},"Experiment")," details in this structure automatically."),(0,l.kt)("p",null,"!!! note\nThis class provides properties to access run attributes\nwhich can be read at any time, or set before the ",(0,l.kt)("inlineCode",{parentName:"p"},"Run"),"\nobjects ",(0,l.kt)("inlineCode",{parentName:"p"},".start()")," method is called."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("h3",{id:"attributes"},"Attributes"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"name")),(0,l.kt)("p",null,"Name of the Run\nReturns\nThe specified (or autogenerated) Run name."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"run_command")),(0,l.kt)("p",null,"The command you would you to start the main script from the root of the source tree."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'python scripts/start_foo.py --arg "[1, 2]" --flag\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"url")),(0,l.kt)("p",null,"Remote URL to the repository"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"relative_working_dir")),(0,l.kt)("p",null,"local path to the repository"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"path")),(0,l.kt)("p",null,"local path to the repository"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"description")),(0,l.kt)("p",null,"Human readable description of the Run's contents\nReturns\nA description string if one was attached to the Run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"strategy")),(0,l.kt)("p",null,"Hyperparameter search strategy.\nReturns\nOne of ",(0,l.kt)("inlineCode",{parentName:"p"},"['grid_search', 'random_search']")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"num_trials")),(0,l.kt)("p",null,"How many samples of full search space are used using the ",(0,l.kt)("inlineCode",{parentName:"p"},"'random_search'")," strategy.\nReturns\nNumber of trials."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"framework")),(0,l.kt)("p",null,"Determines the ML framework used.\nReturns\nOne of ",(0,l.kt)("inlineCode",{parentName:"p"},'["lightning", "pytorch", "tensorflow", "julia"]'),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"dependency_file")),(0,l.kt)("p",null,"Path to a dependency file to use to install runtime requirements.\nReturns\nPath to a dependency file."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"estimated_hourly_cost")),(0,l.kt)("p",null,"Estimated hourly cost of the run.\nReturns\nValue corresponding to (estimated) cost / hr in US Dollars."),(0,l.kt)("p",null,'(rlizzo): Update to use the "dry-run" API to get the estimated cost.'),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," start ()")),(0,l.kt)("p",null,"Launches the hyper-parameter sweep computations on the cluster."),(0,l.kt)("p",null,"After starting a Run, most of the run configuration cannot be changed.\nIf successful, the machine resources requested will be provisioned and\nbegin billing your account until the run completes, fails, is cancelled,'\nor your account runs out of funds."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," delete ()")),(0,l.kt)("p",null,"Deletes the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," __repr__ ()")),(0,l.kt)("p",null,"Pretty printed output detailing current state of the run."),(0,l.kt)("p",null,"Primarily for use as a quick way to execute objects in juyterlab and\noutput some info about the run.\nReturns\nA string detailing the current state of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," __contains__ (item)")),(0,l.kt)("p",null,"Check if an experiment with the provided name exists in the Run."),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("p",null,"Returns\nTrue if the experiment exists, otherwise False."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," __len__ ()")),(0,l.kt)("p",null,"Check how many experiments are recorded in the Run.\nReturns\nNumber of experiments recorded in the Run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," __iter__ ()")),(0,l.kt)("p",null,"Allows for iteration over the run, yielding every Experiment object recorded."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," cancel ()")),(0,l.kt)("p",null,'Requests the grid platform cancels every Experiment in the Run.\nReturns\na collection of experiment names if each experiment was successfully\ncancelled or had previously reached a terminal status ("CANCELLED",\n"FAILED", "COMPLETED").'),(0,l.kt)("h2",{id:"experiment"},"Experiment"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nclass Experiment(name, cluster_id=None)\n\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"created_at")),(0,l.kt)("p",null,"created_at of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"description")),(0,l.kt)("p",null,"description of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"name")),(0,l.kt)("p",null,"name of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"actions")),(0,l.kt)("p",null,"actions of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cluster_id")),(0,l.kt)("p",null,"cluster_id of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"command")),(0,l.kt)("p",null,"command of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"datastore")),(0,l.kt)("p",null,"datastores of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"desired_state")),(0,l.kt)("p",null,"desired_state of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"dry_run")),(0,l.kt)("p",null,"dry_run of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"env")),(0,l.kt)("p",null,"env of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"runner_framework")),(0,l.kt)("p",null,"runner_framework of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"runner_dockerfile")),(0,l.kt)("p",null,"runner_dockerfile of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"runner_requirements_file")),(0,l.kt)("p",null,"runner_requirements_file of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"runner_package_manager")),(0,l.kt)("p",null,"runner_package_manager of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"instance_type")),(0,l.kt)("p",null,"instance_type of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"resources")),(0,l.kt)("p",null,"resources of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"run_controller_id")),(0,l.kt)("p",null,"run_controller_id of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"scratch")),(0,l.kt)("p",null,"scratch of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"source_code")),(0,l.kt)("p",null,"source_code of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"use_spot")),(0,l.kt)("p",null,"use_spot of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"user")),(0,l.kt)("p",null,"user who owns the of the experiment/run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cost")),(0,l.kt)("p",null,"cost of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"deleted_timestamp")),(0,l.kt)("p",null,"deleted_timestamp of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"finish_timestamp")),(0,l.kt)("p",null,"finish_timestamp of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"hourly_cost")),(0,l.kt)("p",null,"hourly_cost of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"message")),(0,l.kt)("p",null,"message of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"status")),(0,l.kt)("p",null,"status of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"start_timestamp")),(0,l.kt)("p",null,"start_timestamp of the experiment configured as part of the run."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," cancel ()")),(0,l.kt)("p",null,"Request the grid platform cancels the experiment"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," delete ()")),(0,l.kt)("p",null,"Request the grid platform cancels the experiment"),(0,l.kt)("h2",{id:"datastore"},"Datastore"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nclass Datastore(name=None,\n    source=None,\n    team=None,\n    user=None,\n    version=1,\n    compression=None,\n    cluster_id=None)\n\n")),(0,l.kt)("p",null,"Initialize a new DataStore Object."),(0,l.kt)("p",null,"If a DataStore with the given name, version, team and cluster already exists,\nthen the object returned will be able to interact with the existing DataStore."),(0,l.kt)("p",null,"Alternatively, if the DataStore is going to be created for the first time, then\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"source")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"compression")," parameters can be used to specify the location\nof the DataStore on disk (or at a remote location). and to optionally compress the\ndata before uploading."),(0,l.kt)("p",null,"After initializing the datastore object, the data itself can be uploaded by calling\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"upload()")," method."),(0,l.kt)("h1",{id:"todo---user-and-team-shouldnt-be-arguments"},"TODO - user and team shouldn't be arguments"),(0,l.kt)("h3",{id:"parameters-2"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"source")),(0,l.kt)("p",null,"The directory path at which the datastore is initialized from."),(0,l.kt)("p",null,"!!! Note"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"This property is only availabe to the instance of this class which uploads\nthe datastore. Previously existing datastores will not posses any value\nfor this property.\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"compression")),(0,l.kt)("p",null,"Boolean indicating if the data should be compressed during upload."),(0,l.kt)("p",null,"If True, the uploaded data will be decompressed into it's original\ndirectory structure before the datastore is attached to a run or session.\nThis is purely a measure to save time during upload (if the data is\nknown to be compressible)."),(0,l.kt)("p",null,"!!! Note"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"This property is only availabe to the instance of this class which uploads\nthe datastore. Previously existing datastores will not posses any value\nfor this property.\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"name")),(0,l.kt)("p",null,"The name of the datastore."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"version")),(0,l.kt)("p",null,"The version of the datastore."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"user")),(0,l.kt)("p",null,"Information about the owner of the datastore (name, username, etc)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"team")),(0,l.kt)("p",null,"Information about the team which owns the datastore"),(0,l.kt)("p",null,"!!! info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'This will only ever populate for Grid users who are enrolled in a\n"Teams" plan. Please see https://www.grid.ai/pricing/ for more info.\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"created_at")),(0,l.kt)("p",null,"Date-Time timestamp when this datastore was created (first uploaded)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"size")),(0,l.kt)("p",null,"Size (in Bytes) of the datastore."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"snapshot_status")),(0,l.kt)("p",null,"The status of the datastore."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cluster_id")),(0,l.kt)("p",null,"ID of the cluster which this datastore is uploaded to."),(0,l.kt)("p",null,"!!! info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"This feature is only available to bring-your-own-cloud-credentials\ncustomers. Please see https://www.grid.ai/pricing/ for more info.\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," delete ()")),(0,l.kt)("p",null,"Deletes the datastore from the grid system."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," upload ()")),(0,l.kt)("p",null,"Uploads the contents of the directories referenced by this datastore instance to Grid."),(0,l.kt)("p",null,"Depending on your internet connection this may be a potentially long running process.\nIf uploading is inturupsed, the upload session can be resumed by initializing this\n",(0,l.kt)("inlineCode",{parentName:"p"},"Datastore")," object again with the same parameters repeating the call to ",(0,l.kt)("inlineCode",{parentName:"p"},"upload()"),"."),(0,l.kt)("h2",{id:"api"},"api"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"api")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," get_instance_types (cluster_id)")),(0,l.kt)("p",null,"Get the instance types for the given cluster"),(0,l.kt)("h3",{id:"parameters-3"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," ListClusters default_cluster, clusters")),(0,l.kt)("p",null,"ListClusters(default_cluster: str, clusters: List","[grid.openapi.models.externalv1_cluster.Externalv1Cluster]",")"),(0,l.kt)("h3",{id:"parameters-4"},"Parameters"),(0,l.kt)("h3",{id:"attributes-1"},"Attributes"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," list_clusters (is_global=False)")),(0,l.kt)("p",null,"List the clusters for the user"),(0,l.kt)("h3",{id:"parameters-5"},"Parameters"))}c.isMDXComponent=!0}}]);